Parameters:
  HasOAI:
    Description: "Flag indicating whether OAI should be used"
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  LambdaEdgeArn:
    Description: "Lambda@Edge Function Arn"
    Type: String
    Default: ""
  Subdomain:
    Description: "Subdomain"
    Type: String
    Default: ""
  PrimaryDomain:
    Description: "Primary Domain"
    Type: String
    Default: ""

Conditions:
  _HasOAI: !Equals [ !Ref HasOAI, "true" ]
  _HasNotOAI: !Not [ !Equals [ !Ref HasOAI, "true" ] ]
  _HasLambdaEdge: !Not [ !Equals [ !Ref LambdaEdgeArn, "" ] ]
  _HasNotLambdaEdge: !Equals [ !Ref LambdaEdgeArn, "" ]
  _HasLambdaEdgeAndOAI: !And
    - !Condition _HasOAI
    - !Condition _HasLambdaEdge
  _HasNotLambdaEdgeAndOAI: !And
    - !Condition _HasNotOAI
    - !Condition _HasNotLambdaEdge

Resources:
  DNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${PrimaryDomain}."
      Name: !Sub "${Subdomain}.${PrimaryDomain}."
      Type: CNAME
      TTL: "300"
      ResourceRecords:
      - !GetAtt CloudFront.DomainName

  S3BucketEmpty:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: "S3Bucket"
    Properties:
      ServiceToken: !ImportValue S3EmptyBucketFunctionArn
      BucketName: !Sub "${Subdomain}.${PrimaryDomain}"

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Subdomain}.${PrimaryDomain}"
      VersioningConfiguration:
        Status: "Enabled"
    DeletionPolicy: Delete

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Sub "${Subdomain}.${PrimaryDomain}"
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal: !If
            - _HasOAI
            - AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
            - "*"
          Action: "s3:GetObject"
          Resource: !Sub
            - "${S3BucketArn}/*"
            - S3BucketArn: !GetAtt S3Bucket.Arn

  CloudFrontOriginAccessIdentity:
    Condition: _HasOAI
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !GetAtt S3Bucket.Arn

  CloudFront:
    Type: AWS::CloudFront::Distribution
    DependsOn: "S3BucketPolicy"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !If
            - _HasLambdaEdgeAndOAI

            # When Lambda@Edge and OAI are used together it is important to use the S3 domain without region and
            # specify region in the Lambda@Edge origin-request, else it will not work.
            - !GetAtt S3Bucket.DomainName

            # It's important to not use '!GetAtt S3Bucket.DomainName' as it can take hours before your S3 bucket
            # contents are replicated to 'us-east-1' which is used as default by CloudFront for S3 origin URL
            # 'bucketName.s3.amazonaws.com'.
            - !Sub "${Subdomain}.${PrimaryDomain}.s3-${AWS::Region}.amazonaws.com"
            Id: !Sub "${Subdomain}.${PrimaryDomain}"

            # When OAI is used we set up a S3 origin with Origin Access Identity for no direct S3 bucket access.
            S3OriginConfig: !If
              - _HasOAI
              - OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
              - !Ref "AWS::NoValue"

            # When OAI is not used we set up S3 as a custom origin for faster intial access, as S3 bucket is read-only for the public
            # and therefore can bypass the AWS CloudFront replication.
            CustomOriginConfig: !If
              - _HasNotOAI
              - OriginProtocolPolicy: "match-viewer"
              - !Ref "AWS::NoValue"
        Enabled: "true"
        HttpVersion: "http2"
        Aliases:
        - !Sub "${Subdomain}.${PrimaryDomain}"
        PriceClass: "PriceClass_100"
        DefaultRootObject: index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"
        DefaultCacheBehavior:
          TargetOriginId: !Sub "${Subdomain}.${PrimaryDomain}"
          LambdaFunctionAssociations: !If
            - _HasLambdaEdge
            -
              - EventType: "origin-request"
                LambdaFunctionARN: !Ref LambdaEdgeArn
              - EventType: "origin-response"
                LambdaFunctionARN: !Ref LambdaEdgeArn
              - EventType: "viewer-request"
                LambdaFunctionARN: !Ref LambdaEdgeArn
              - EventType: "viewer-response"
                LambdaFunctionARN: !Ref LambdaEdgeArn
            - !Ref "AWS::NoValue"
          ViewerProtocolPolicy: "allow-all"
          Compress: true
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
